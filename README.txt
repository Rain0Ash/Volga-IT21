Здравствуйте.

#Инструкция по сборке:
Используемая для написания приложения IDE: Jetbrains Rider 2021.2.1
Проект написан на фреймворке .NET 5.0 с использованием языка C# 9.
Используемые в приложении библиотеки и фреймворки: Entity Framework Core.
Для REST WebApi приложения: ASP.NET Core; Swashbuckle.AspNetCore; Serilog. Подробная информация о библиотеках и их версиях находится в .csproj файлах

В решении находится 5 проектов (исключая тесты):
Volga-IT - библиотека классов для выполнения основных функций. Является главной частью.
Volga-IT-Database - расширение библиотеки классов для работы с базами данных. Зависит от Volga-IT
Volga-IT-HtmlAgilityPack - расширение библиотеки классов для работы при помощи библиотеки HtmlAgilityPack взамен самописного парсера. Зависит от Volga-IT
Volga-IT-Console - консольное приложение. Зависит от Volga-IT и Volga-IT-Database
Volga-IT-Asp - REST WebApi приложение. Зависит от Volga-IT и Volga-IT-Database

Сборка выполняется стандартными средствами.
Также в архиве (Publish) находятся уже собранные (publish self-contained) версии приложения для Windows x64.

#Инструкция по работе с приложением:
Консольная версия:
Запускается через исполняемый файл. Первым аргументом ОБЯЗАТЕЛЬНО требуется указать путь к html-файлу.
Консольное приложение работает через аргументы. Список доступных аргументов:
-lower - превращать слова в нижний регистр при обработке.
-normal - не менять регистр при обработке слов.
-upper - менять регистр слов на верхний. Используется по умолчанию. В случае конфликтов аргументов регистра используется режим -normal.
-culture - использовать текущую культуру взамен инвариантной.
-logtofile - логировать ошибки в файл, взамен логгирования в stdout (консоль).
-trace - логгировать трассировку (уровень trace) приложения.
-database - использовать sqlite базу данных для сохранения статистики слов.
-help - показать справку по доступным аргументам.
!!!Пример запуска программы для требований задания: <path-to-executable> <path-to-html-file> -logtofile -database
Файл для логгирования создается в директории, в которой находится исполняемый файл приложения. Для проверки работоспособности записи в файл, дополнительно используйте аргумент -trace
Файл базы данных создается в директории Database, находящейся в директории, в которой находится исполняемый файл приложения

REST WebApi версия:
Запускается при помощи Kestrel веб-сервера на порту 5001.
В Development режиме есть возможность использовать SwaggerUI. Для этого можно перейти по адресу: https://localhost:5001/swagger/index.html
Содержит 3 возможных запроса:
Get: получить статистику (если она есть на сервере) по хеш-значению файла. Возвращает отсортированный JSON-массив из пар слово-количество. Если хеш-значения нет на сервере - возвращает пустой JSON-массив
Post: загружает файл. Размер файла ограничен 1 MB (настраивается в контроллере). Возвращает отсортированный JSON-массив из пар слово-количество и хеш-значение файла. В случае неудачи - возвращает статус-код ошибки.
Delete: удалить статистику по файлу с сервера по хеш-значению файла. Возвращает булево значение успеха (true - успешно удалено, false - такого хеш-значения нет или произошла ошибка при удалении).
Файл для логгирования создается в директории Logs, находящейся в директории, в которой находится исполняемый файл приложения
Файл базы данных создается в директории Database, находящейся в директории, в которой находится исполняемый файл приложения
!Для уже собранного приложения всегда включен режим разработчика. В том числе SwaggerUI.

#Описание архитектуры приложения: ( тут могла бы быть UML-диаграмма, но ее не заказывали :) )
Библиотека классов Volga-IT:
Разделяется на несколько функциональных блоков:
1. Работа с аргументами (Environment): (ArgumentParser) для парсинга аргументов, (ArgumentHandler) для их обработки. 
2. Парсинг html файлов и дальнейшая обработка данных (Extractor): (HtmlTextExtractor) для парсинга Html файлов, (HtmlExtractHandler) для дальнейшей обработки данных полученных из парсера (в.ч. подсчет слов),
(WordCounterRecordSorter) для сортировки последовательности полученных пар <слово>-<количество>.
3. Записи DTO (Models)
4. Классы-помощники (Helpers)

Консольное приложение Volga-IT-Console:
Простое последовательное приложение, использующее библиотеку классов.
Содержит собственную простейшую реализацию логгера (Environment): (Logger) для логгирования сообщений и ошибок.

WebApi приложение Volga-IT-Asp:
Состоит из контроллеров (Controllers): контроллер для выполнения логики запросов (HtmlAnalyzeController), контроллер ошибок (ErrorController)
Инициализатор ASP.NET Core приложения: (Program) и (Startup).
Использует предоставляемые ASP.NET Core возможности по Dependency Injection.

Тесты Volga-IT-Tests:
Содержит тесты для проверки функционирования классов и методов из библиотеки Volga-IT.

P.S. Старался писать самодокументируемый код, насколько получилось - не знаю. Оставлял комментарии там где считал нужным. Про XML-документацию в задании также не сказано.
P.P.S. Время выполнения задания - около 16 часов.